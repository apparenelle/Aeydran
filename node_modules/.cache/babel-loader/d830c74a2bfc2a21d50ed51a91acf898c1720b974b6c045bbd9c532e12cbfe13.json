{"ast":null,"code":"import Panel from \"./panel.js\";\nconst _Stats = class _Stats {\n  constructor({\n    logsPerSecond = 20,\n    samplesLog = 100,\n    samplesGraph = 10,\n    precision = 2,\n    minimal = false,\n    horizontal = true,\n    mode = 0\n  } = {}) {\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement(\"div\");\n    this.container.style.cssText = \"position:fixed;top:0;left:0;opacity:0.9;z-index:10000;\";\n    if (minimal) {\n      this.container.style.cssText += \"cursor:pointer\";\n    }\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query = null;\n    this.minimal = minimal;\n    this.beginTime = (performance || Date).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n    this.queryCreated = false;\n    this.fpsPanel = this.addPanel(new _Stats.Panel(\"FPS\", \"#0ff\", \"#002\"), 0);\n    this.msPanel = this.addPanel(new _Stats.Panel(\"CPU\", \"#0f0\", \"#020\"), 1);\n    this.gpuPanel = null;\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n    if (this.minimal) {\n      this.container.addEventListener(\"click\", event => {\n        event.preventDefault();\n        this.showPanel(++this.mode % this.container.children.length);\n      }, false);\n      this.mode = mode;\n      this.showPanel(this.mode);\n    } else {\n      window.addEventListener(\"resize\", () => {\n        this.resizePanel(this.fpsPanel, 0);\n        this.resizePanel(this.msPanel, 1);\n        if (this.gpuPanel) {\n          this.resizePanel(this.gpuPanel, 2);\n        }\n      });\n    }\n  }\n  resizePanel(panel, offset) {\n    panel.canvas.style.position = \"absolute\";\n    if (this.minimal) {\n      panel.canvas.style.display = \"none\";\n    } else {\n      panel.canvas.style.display = \"block\";\n      if (this.horizontal) {\n        panel.canvas.style.top = \"0px\";\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + \"px\";\n      } else {\n        panel.canvas.style.left = \"0px\";\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR + \"px\";\n      }\n    }\n  }\n  addPanel(panel, offset) {\n    if (panel.canvas) {\n      this.container.appendChild(panel.canvas);\n      this.resizePanel(panel, offset);\n    }\n    return panel;\n  }\n  showPanel(id) {\n    for (let i = 0; i < this.container.children.length; i++) {\n      const child = this.container.children[i];\n      child.style.display = i === id ? \"block\" : \"none\";\n    }\n    this.mode = id;\n  }\n  init(canvas) {\n    this.canvasGpu = canvas;\n    if (!this.canvasGpu) return;\n    this.gl = this.canvasGpu.getContext(\"webgl2\");\n    this.ext = this.gl ? this.gl.getExtension(\"EXT_disjoint_timer_query_webgl2\") : null;\n    if (this.ext) {\n      this.gpuPanel = this.addPanel(new _Stats.Panel(\"GPU\", \"#ff0\", \"#220\"), 2);\n    }\n  }\n  begin() {\n    this.beginProfiling(\"cpu-started\");\n    if (!this.gl || !this.ext) return;\n    if (this.query) {\n      const available = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT_AVAILABLE);\n      this.disjoint = this.gl.getParameter(this.ext.GPU_DISJOINT_EXT);\n      if (available && !this.disjoint) {\n        this.ns = this.gl.getQueryParameter(this.query, this.gl.QUERY_RESULT);\n        const ms = this.ns * 1e-6;\n        if (available || this.disjoint) {\n          this.gl.deleteQuery(this.query);\n          this.query = null;\n        }\n        if (available) {\n          this.addToAverage(ms, this.averageGpu);\n        }\n      }\n    }\n    if (!this.query) {\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n      if (this.query) {\n        this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT, this.query);\n      }\n    }\n  }\n  end() {\n    this.beginTime = this.endInternal();\n    this.endProfiling(\"cpu-started\", \"cpu-finished\", \"cpu-duration\", this.averageCpu);\n    if (!this.gl || !this.ext) return;\n    if (this.queryCreated && this.gl.getQuery(this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY)) {\n      this.gl.endQuery(this.ext.TIME_ELAPSED_EXT);\n    }\n  }\n  endInternal() {\n    this.frames++;\n    const time = (performance || Date).now();\n    if (time >= this.prevCpuTime + 1e3 / this.logsPerSecond) {\n      this.updatePanel(this.msPanel, this.averageCpu);\n      this.updatePanel(this.gpuPanel, this.averageGpu);\n      this.prevCpuTime = time;\n    }\n    if (time >= this.prevTime + 1e3) {\n      const fps = this.frames * 1e3 / (time - this.prevTime);\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n      this.prevTime = time;\n      this.frames = 0;\n    }\n    return time;\n  }\n  addToAverage(value, averageArray) {\n    averageArray.logs.push(value);\n    if (averageArray.logs.length > this.samplesLog) {\n      averageArray.logs.shift();\n    }\n    averageArray.graph.push(value);\n    if (averageArray.graph.length > this.samplesGraph) {\n      averageArray.graph.shift();\n    }\n  }\n  beginProfiling(marker) {\n    if (window.performance) {\n      window.performance.mark(marker);\n    }\n  }\n  endProfiling(startMarker, endMarker, measureName, averageArray) {\n    if (window.performance && endMarker) {\n      window.performance.mark(endMarker);\n      const cpuMeasure = performance.measure(measureName, startMarker, endMarker);\n      this.addToAverage(cpuMeasure.duration, averageArray);\n    }\n  }\n  updatePanel(panel, averageArray) {\n    if (averageArray.logs.length > 0) {\n      let sumLog = 0;\n      let max = 0.01;\n      for (let i = 0; i < averageArray.logs.length; i++) {\n        sumLog += averageArray.logs[i];\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n      }\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n        sumGraph += averageArray.graph[i];\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n      }\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length, this.samplesLog), sumGraph / Math.min(averageArray.graph.length, this.samplesGraph), max, maxGraph, this.precision);\n      }\n    }\n  }\n};\n_Stats.Panel = Panel;\nlet Stats = _Stats;\nexport { Stats as default };","map":{"version":3,"mappings":"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","names":["_Stats","constructor","logsPerSecond","samplesLog","samplesGraph","precision","minimal","horizontal","mode","document","createElement","style","cssText","canvasGpu","gl","query","performance","Date","now","prevTime","beginTime","prevCpuTime","frames","averageCpu","logs","graph","averageGpu","queryCreated","addPanel","Panel","gpuPanel","container","addEventListener","event","preventDefault","showPanel","children","length","window","fpsPanel","msPanel","resizePanel","panel","offset","position","display","top","canvas","left","WIDTH","PR","HEIGHT","appendChild","id","i","child","init","getContext","ext","getExtension","begin","beginProfiling","getQueryParameter","QUERY_RESULT_AVAILABLE","disjoint","getParameter","GPU_DISJOINT_EXT","QUERY_RESULT","ns","deleteQuery","available","ms","createQuery","beginQuery","TIME_ELAPSED_EXT","end","endInternal","endProfiling","getQuery","CURRENT_QUERY","endQuery","time","updatePanel","fps","update","addToAverage","value","averageArray","push","shift","marker","mark","startMarker","endMarker","measureName","cpuMeasure","measure","duration","sumLog","max","sumGraph","maxGraph","Math","min","Stats"],"sources":["C:\\Users\\Wolfgang\\Documents\\GitHub\\Aeydran\\node_modules\\stats-gl\\lib\\main.ts"],"sourcesContent":["import Panel from \"./panel\";\n\nexport interface AverageArray {\n  logs: number[];\n  graph: number[];\n}\n\n\nclass Stats {\n  mode: number;\n  container: HTMLDivElement;\n  minimal: boolean;\n  horizontal: boolean;\n  beginTime: number;\n  prevTime: number;\n  prevCpuTime: number;\n  frames: number;\n  averageCpu: AverageArray;\n  averageGpu: AverageArray;\n  queryCreated: boolean;\n  fpsPanel: Panel;\n  static Panel: typeof Panel = Panel;\n  msPanel: Panel;\n  gpuPanel: Panel | null;\n  samplesLog: number;\n  samplesGraph: number;\n  logsPerSecond: number;\n  precision: number;\n  canvasGpu: HTMLCanvasElement | null;\n  gl: WebGL2RenderingContext | null;\n  ext: any;\n  query: WebGLQuery | null;\n  disjoint: any;\n  ns: any;\n\n  constructor( { logsPerSecond = 20, samplesLog = 100, samplesGraph = 10, precision = 2, minimal = false, horizontal = true, mode = 0 } = {} ) {\n\n    this.mode = mode;\n    this.horizontal = horizontal;\n    this.container = document.createElement( 'div' );\n    this.container.style.cssText = 'position:fixed;top:0;left:0;opacity:0.9;z-index:10000;';\n\n    if ( minimal ) {\n\n      this.container.style.cssText += 'cursor:pointer';\n\n    }\n\n    this.canvasGpu = null;\n    this.gl = null;\n    this.query =  null;\n\n    this.minimal = minimal;\n\n    this.beginTime = ( performance || Date ).now();\n    this.prevTime = this.beginTime;\n    this.prevCpuTime = this.beginTime;\n    this.frames = 0;\n    this.averageCpu = {\n      logs: [],\n      graph: []\n    };\n    this.averageGpu = {\n      logs: [],\n      graph: []\n    };\n\n    this.queryCreated = false;\n\n    this.fpsPanel = this.addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ), 0 );\n    this.msPanel = this.addPanel( new Stats.Panel( 'CPU', '#0f0', '#020' ), 1 );\n    this.gpuPanel = null;\n\n    this.samplesLog = samplesLog;\n    this.samplesGraph = samplesGraph;\n    this.precision = precision;\n    this.logsPerSecond = logsPerSecond;\n\n    if ( this.minimal ) {\n\n      this.container.addEventListener( 'click', ( event ) => {\n\n        event.preventDefault();\n        this.showPanel( ++ this.mode % this.container.children.length );\n\n      }, false );\n\n      this.mode = mode;\n      this.showPanel( this.mode );\n\n    } else {\n\n      window.addEventListener('resize', () =>{\n        \n        this.resizePanel( this.fpsPanel, 0 );\n        this.resizePanel( this.msPanel, 1 );\n  \n        if (this.gpuPanel) {\n          this.resizePanel( this.gpuPanel, 2 );\n        }\n      })\n    }\n\n  }\n\n  resizePanel( panel: Panel, offset: number) {\n\n    panel.canvas.style.position = 'absolute';\n\n    if ( this.minimal ) {\n\n      panel.canvas.style.display = 'none';\n\n    } else {\n\n      panel.canvas.style.display = 'block';\n      if (this.horizontal) {\n        panel.canvas.style.top = '0px';\n        panel.canvas.style.left = offset * panel.WIDTH / panel.PR + 'px';\n      } else {\n        panel.canvas.style.left = '0px';\n        panel.canvas.style.top = offset * panel.HEIGHT / panel.PR  + 'px';\n\n      }\n    }\n  }\n    \n  addPanel(panel: Panel, offset: number) {\n\n    if(panel.canvas) {\n\n      this.container.appendChild(panel.canvas);\n    \n      this.resizePanel(panel, offset);\n\n    }\n\n    return panel;\n\n  }\n\n  showPanel( id: number ) {\n\n    for ( let i = 0; i < this.container.children.length; i ++ ) {\n      const child = this.container.children[i] as HTMLElement;\n\n      child.style.display = i === id ? 'block' : 'none';\n\n    }\n\n    this.mode = id;\n\n  }\n\n  init( canvas: any ) {\n\n    this.canvasGpu = canvas;\n    if ( ! this.canvasGpu ) return;\n    this.gl = this.canvasGpu.getContext( 'webgl2' );\n    this.ext = this.gl ? this.gl.getExtension( 'EXT_disjoint_timer_query_webgl2' ) : null;\n    if ( this.ext ) {\n\n      this.gpuPanel = this.addPanel( new Stats.Panel( 'GPU', '#ff0', '#220' ), 2 );\n\n    }\n\n  }\n\n  begin() {\n\n    this.beginProfiling( 'cpu-started' );\n    if ( ! this.gl || ! this.ext ) return;\n\n\n    if ( this.query ) {\n\n      const available = this.gl.getQueryParameter( this.query, this.gl.QUERY_RESULT_AVAILABLE );\n      this.disjoint = this.gl.getParameter( this.ext.GPU_DISJOINT_EXT );\n\n      if ( available && ! this.disjoint ) {\n\n        this.ns = this.gl.getQueryParameter( this.query, this.gl.QUERY_RESULT );\n        const ms = this.ns * 1e-6;\n\n        if ( available || this.disjoint ) {\n\n          this.gl.deleteQuery( this.query );\n          this.query = null;\n\n        }\n\n        if ( available ) {\n\n          this.addToAverage( ms, this.averageGpu );\n\n        }\n\n      }\n\n    }\n\n    if ( ! this.query ) {\n\n      this.queryCreated = true;\n      this.query = this.gl.createQuery();\n\n      if ( this.query ) {\n        this.gl.beginQuery( this.ext.TIME_ELAPSED_EXT, this.query );\n      }\n\n    }\n\n  }\n\n  end() {\n\n    this.beginTime = this.endInternal()\n\n    this.endProfiling( 'cpu-started', 'cpu-finished', 'cpu-duration', this.averageCpu );\n\n    if ( ! this.gl || ! this.ext ) return;\n\n\n    if ( this.queryCreated && this.gl.getQuery( this.ext.TIME_ELAPSED_EXT, this.gl.CURRENT_QUERY ) ) {\n\n      this.gl.endQuery( this.ext.TIME_ELAPSED_EXT );\n\n    }\n\n\n  }\n\n  endInternal() {\n\n    this.frames ++;\n    const time = ( performance || Date ).now();\n\n    if (time >= this.prevCpuTime + 1000 / this.logsPerSecond) {\n      this.updatePanel( this.msPanel, this.averageCpu );\n      this.updatePanel( this.gpuPanel, this.averageGpu );\n\n      this.prevCpuTime = time;\n    }\n\n    if ( time >= this.prevTime + 1000 ) {\n\n      const fps = ( this.frames * 1000 ) / ( time - this.prevTime );\n\n      this.fpsPanel.update(fps, fps, 100, 100, 0);\n\n      this.prevTime = time;\n      this.frames = 0;\n\n    }\n\n    return time;\n\n  }\n\n  addToAverage( value: number, averageArray: { logs: any; graph: any; } ) {\n\n    averageArray.logs.push( value );\n    if ( averageArray.logs.length > this.samplesLog ) {\n\n      averageArray.logs.shift();\n\n    }\n\n    averageArray.graph.push( value );\n    if ( averageArray.graph.length > this.samplesGraph ) {\n\n      averageArray.graph.shift();\n\n    }\n\n  }\n\n  beginProfiling( marker: string ) {\n\n    if ( window.performance ) {\n\n      window.performance.mark( marker );\n\n    }\n\n  }\n\n  endProfiling( startMarker: string | PerformanceMeasureOptions | undefined, endMarker: string | undefined, measureName: string, averageArray: {logs: number[], graph: number[]} ) {\n\n    if ( window.performance && endMarker ) {\n\n      window.performance.mark( endMarker );\n      const cpuMeasure = performance.measure( measureName, startMarker, endMarker );\n      this.addToAverage( cpuMeasure.duration, averageArray );\n\n    }\n\n  }\n\n  updatePanel(panel: { update: any; } | null, averageArray: {logs: number[], graph: number[]}) {\n\n    if (averageArray.logs.length > 0) {\n\n      let sumLog = 0;\n      let max = 0.01;\n\n      for (let i = 0; i < averageArray.logs.length; i++) {\n\n        sumLog += averageArray.logs[i];\n\n        if (averageArray.logs[i] > max) {\n          max = averageArray.logs[i];\n        }\n\n      }\n\n      let sumGraph = 0;\n      let maxGraph = 0.01;\n      for (let i = 0; i < averageArray.graph.length; i++) {\n\n        sumGraph += averageArray.graph[i];\n\n        if (averageArray.graph[i] > maxGraph) {\n          maxGraph = averageArray.graph[i];\n        }\n\n      }\n\n      if (panel) {\n        panel.update(sumLog / Math.min(averageArray.logs.length,this.samplesLog), sumGraph / Math.min(averageArray.graph.length,this.samplesGraph), max, maxGraph, this.precision);\n      }\n\n    }\n  }\n\n\n}\n\n\nexport default Stats;"]},"metadata":{},"sourceType":"module","externalDependencies":[]}