{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Wolfgang\\\\Documents\\\\GitHub\\\\Aeydran\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport First from './components/First/First.js';\nimport Second from './components/Second/Second.js';\nimport Third from './components/Third/Third.js';\nimport Fourth from './components/Fourth/Fourth.js';\nimport Footer from './components/Footer/Footer.js';\nimport './App.css';\n// import './Tablet.css';\n// import './Mobile.css';\nimport './fonts/Open_Sans/OpenSans-VariableFont_wdth,wght.ttf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let windowWidth = window.innerWidth;\n  let mobileWidth = 1025; //jsx marker to swap to mobile\n  let isMobile = undefined;\n  if (windowWidth < mobileWidth) {\n    isMobile = true;\n  } else {\n    isMobile = false;\n  }\n\n  //use State could go here\n  const [mobileState, setIsMobile] = useState(isMobile);\n  console.log(`This is initial width: ${windowWidth}px. Mobile: ${isMobile}.`);\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      windowWidth = window.innerWidth;\n      if (windowWidth < mobileWidth) {\n        isMobile = true;\n      } else {\n        isMobile = false;\n      }\n      console.log(`Window width is ${windowWidth}px. Are we in mobile mode: ${isMobile}.`);\n      setIsMobile(isMobile);\n      // sleep(500);  //only use to slow down in production if necessary\n    });\n    // passionFlexWidth = itemBalanceWidthCalculator(\"passion-box-layout\");\n  }, [windowWidth, isMobile]);\n\n  // const scrollRef = useRef(null);\n  // useScrollSnap({ ref:scrollRef, duration:2, delay: 0});\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    id: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(First, {\n      isMobile: mobileState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Second, {\n      isMobile: mobileState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Third, {\n      isMobile: mobileState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Fourth, {\n      isMobile: mobileState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      isMobile: mobileState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"q2XGCyjZZ2++mKUFKnzcGs7VTnE=\");\n_c = App;\nfunction sleep(ms) {\n  // console.log(\"I slept\"); works -- supposed to slow down render calls\n  // use just in case too many calls are occuring\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport default App;\n// ref={scrollRef}\n\n// style={{'--width' : `${passionFlexWidth}%`}}\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","First","Second","Third","Fourth","Footer","jsxDEV","_jsxDEV","App","_s","windowWidth","window","innerWidth","mobileWidth","isMobile","undefined","mobileState","setIsMobile","console","log","addEventListener","className","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","sleep","ms","Promise","resolve","setTimeout","$RefreshReg$"],"sources":["C:/Users/Wolfgang/Documents/GitHub/Aeydran/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n\r\nimport First from './components/First/First.js';\r\nimport Second from './components/Second/Second.js';\r\nimport Third from './components/Third/Third.js';\r\nimport Fourth from './components/Fourth/Fourth.js';\r\nimport Footer from './components/Footer/Footer.js';\r\n\r\nimport './App.css';\r\n// import './Tablet.css';\r\n// import './Mobile.css';\r\nimport './fonts/Open_Sans/OpenSans-VariableFont_wdth,wght.ttf'\r\n\r\n\r\n\r\nfunction App() {\r\n  let windowWidth = window.innerWidth;\r\n  let mobileWidth = 1025; //jsx marker to swap to mobile\r\n  let isMobile = undefined;\r\n  \r\n  if (windowWidth < mobileWidth) {\r\n    isMobile = true;\r\n  }\r\n  else {\r\n    isMobile = false;\r\n  }\r\n\r\n  //use State could go here\r\n  const [mobileState, setIsMobile] = useState(isMobile);\r\n\r\n  console.log(`This is initial width: ${windowWidth}px. Mobile: ${isMobile}.`);\r\n\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () =>{\r\n      windowWidth = window.innerWidth;\r\n      if(windowWidth<mobileWidth)\r\n      {\r\n        isMobile=true;\r\n      }\r\n      else\r\n      {\r\n        isMobile=false\r\n      }\r\n      console.log(`Window width is ${windowWidth}px. Are we in mobile mode: ${isMobile}.`); \r\n      setIsMobile(isMobile);\r\n      // sleep(500);  //only use to slow down in production if necessary\r\n    });\r\n    // passionFlexWidth = itemBalanceWidthCalculator(\"passion-box-layout\");\r\n  }, [windowWidth, isMobile]);\r\n\r\n  // const scrollRef = useRef(null);\r\n  // useScrollSnap({ ref:scrollRef, duration:2, delay: 0});\r\n\r\n\r\n  return ( \r\n    <div className=\"App\" id='app'  >\r\n      <First isMobile={mobileState}/>\r\n      <Second isMobile={mobileState}/>\r\n      <Third isMobile={mobileState}/>\r\n      <Fourth isMobile={mobileState}/>\r\n      <Footer isMobile={mobileState}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction sleep(ms) {\r\n  // console.log(\"I slept\"); works -- supposed to slow down render calls\r\n  // use just in case too many calls are occuring\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport default App;\r\n// ref={scrollRef}\r\n\r\n\r\n// style={{'--width' : `${passionFlexWidth}%`}}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAG1D,OAAOC,KAAK,MAAM,6BAA6B;AAC/C,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAOC,KAAK,MAAM,6BAA6B;AAC/C,OAAOC,MAAM,MAAM,+BAA+B;AAClD,OAAOC,MAAM,MAAM,+BAA+B;AAElD,OAAO,WAAW;AAClB;AACA;AACA,OAAO,uDAAuD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAI9D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAIC,WAAW,GAAGC,MAAM,CAACC,UAAU;EACnC,IAAIC,WAAW,GAAG,IAAI,CAAC,CAAC;EACxB,IAAIC,QAAQ,GAAGC,SAAS;EAExB,IAAIL,WAAW,GAAGG,WAAW,EAAE;IAC7BC,QAAQ,GAAG,IAAI;EACjB,CAAC,MACI;IACHA,QAAQ,GAAG,KAAK;EAClB;;EAEA;EACA,MAAM,CAACE,WAAW,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAACgB,QAAQ,CAAC;EAErDI,OAAO,CAACC,GAAG,CAAE,0BAAyBT,WAAY,eAAcI,QAAS,GAAE,CAAC;EAG5Ef,SAAS,CAAC,MAAM;IACdY,MAAM,CAACS,gBAAgB,CAAC,QAAQ,EAAE,MAAK;MACrCV,WAAW,GAAGC,MAAM,CAACC,UAAU;MAC/B,IAAGF,WAAW,GAACG,WAAW,EAC1B;QACEC,QAAQ,GAAC,IAAI;MACf,CAAC,MAED;QACEA,QAAQ,GAAC,KAAK;MAChB;MACAI,OAAO,CAACC,GAAG,CAAE,mBAAkBT,WAAY,8BAA6BI,QAAS,GAAE,CAAC;MACpFG,WAAW,CAACH,QAAQ,CAAC;MACrB;IACF,CAAC,CAAC;IACF;EACF,CAAC,EAAE,CAACJ,WAAW,EAAEI,QAAQ,CAAC,CAAC;;EAE3B;EACA;;EAGA,oBACEP,OAAA;IAAKc,SAAS,EAAC,KAAK;IAACC,EAAE,EAAC,KAAK;IAAAC,QAAA,gBAC3BhB,OAAA,CAACN,KAAK;MAACa,QAAQ,EAAEE;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC/BpB,OAAA,CAACL,MAAM;MAACY,QAAQ,EAAEE;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChCpB,OAAA,CAACJ,KAAK;MAACW,QAAQ,EAAEE;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAC/BpB,OAAA,CAACH,MAAM;MAACU,QAAQ,EAAEE;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAChCpB,OAAA,CAACF,MAAM;MAACS,QAAQ,EAAEE;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEV;AAAClB,EAAA,CAjDQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AAmDZ,SAASqB,KAAKA,CAACC,EAAE,EAAE;EACjB;EACA;EACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;AACxD;AAEA,eAAetB,GAAG;AAClB;;AAGA;AAAA,IAAAoB,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}