{"ast":null,"code":"class Panel {\n  constructor(name, fg, bg) {\n    this.name = name;\n    this.fg = fg;\n    this.bg = bg;\n    this.PR = Math.round(window.devicePixelRatio || 1);\n    this.WIDTH = 90 * this.PR;\n    this.HEIGHT = 48 * this.PR;\n    this.TEXT_X = 3 * this.PR;\n    this.TEXT_Y = 2 * this.PR;\n    this.GRAPH_X = 3 * this.PR;\n    this.GRAPH_Y = 15 * this.PR;\n    this.GRAPH_WIDTH = 84 * this.PR;\n    this.GRAPH_HEIGHT = 30 * this.PR;\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = 90 * this.PR;\n    this.canvas.height = 48 * this.PR;\n    this.canvas.style.width = \"90px\";\n    this.canvas.style.position = \"absolute\";\n    this.canvas.style.height = \"48px\";\n    this.canvas.style.cssText = \"width:90px;height:48px\";\n    this.context = this.canvas.getContext(\"2d\");\n    if (this.context) {\n      this.context.font = \"bold \" + 9 * this.PR + \"px Helvetica,Arial,sans-serif\";\n      this.context.textBaseline = \"top\";\n      this.context.fillStyle = this.bg;\n      this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n      this.context.fillStyle = this.fg;\n      this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n      this.context.fillStyle = this.bg;\n      this.context.globalAlpha = 0.9;\n      this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n    }\n  }\n  update(value, valueGraph, maxValue, maxGraph, decimals = 0) {\n    let min = Infinity,\n      max = 0;\n    if (!this.context) return;\n    min = Math.min(min, value);\n    max = Math.max(maxValue, value);\n    maxGraph = Math.max(maxGraph, valueGraph);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 1;\n    this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n    this.context.fillStyle = this.fg;\n    this.context.fillText(value.toFixed(decimals) + \" \" + this.name + \" (\" + min.toFixed(decimals) + \"-\" + parseFloat(max.toFixed(decimals)) + \")\", this.TEXT_X, this.TEXT_Y);\n    this.context.drawImage(this.canvas, this.GRAPH_X + this.PR, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT, this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT);\n    this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, this.GRAPH_HEIGHT);\n    this.context.fillStyle = this.bg;\n    this.context.globalAlpha = 0.9;\n    this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, (1 - valueGraph / maxGraph) * this.GRAPH_HEIGHT);\n  }\n}\n;\nexport { Panel as default };","map":{"version":3,"mappings":"AAAA,MAAMA,MAAM;EAgBRC,YAAYC,MAAcC,IAAYC,IAAY;IAE9C,KAAKF,OAAOA;IACZ,KAAKC,KAAKA;IACV,KAAKC,KAAKA;IACV,KAAKC,KAAKC,KAAKC,MAAOC,OAAOC,oBAAoB,CAAE;IAE9C,aAAQ,KAAK,KAAKJ;IAClB,cAAS,KAAK,KAAKA;IACnB,cAAS,IAAI,KAAKA;IAClB,cAAS,IAAI,KAAKA;IAClB,eAAU,IAAI,KAAKA;IACnB,eAAU,KAAK,KAAKA;IACpB,mBAAc,KAAK,KAAKA;IACxB,oBAAe,KAAK,KAAKA;IAEzB,cAASK,SAASC,cAAc,QAAQ;IACxC,YAAOC,QAAQ,KAAK,KAAKP;IACzB,YAAOQ,SAAS,KAAK,KAAKR;IAC1B,YAAOS,MAAMF,QAAQ;IACrB,YAAOE,MAAMC,WAAW;IACxB,YAAOD,MAAMD,SAAS;IACtB,YAAOC,MAAME,UAAU;IAE5B,KAAKC,UAAU,KAAKC,OAAOC,WAAW,IAAI;IAE1C,IAAI,KAAKF,SAAS;MACd,KAAKA,QAAQG,OAAO,UAAW,IAAI,KAAKf,KAAM;MAC9C,KAAKY,QAAQI,eAAe;MAEvB,aAAQC,YAAY,KAAKlB;MAC9B,KAAKa,QAAQM,SAAS,GAAG,GAAG,KAAKC,OAAO,KAAKC,MAAM;MAE9C,aAAQH,YAAY,KAAKnB;MAC9B,KAAKc,QAAQS,SAAS,KAAKxB,MAAM,KAAKyB,QAAQ,KAAKC,MAAM;MACpD,aAAQL,SAAS,KAAKM,SAAS,KAAKC,SAAS,KAAKC,aAAa,KAAKC,YAAY;MAEhF,aAAQV,YAAY,KAAKlB;MAC9B,KAAKa,QAAQgB,cAAc;MACtB,aAAQV,SAAS,KAAKM,SAAS,KAAKC,SAAS,KAAKC,aAAa,KAAKC,YAAY;IACzF;EAEJ;EAEAE,OAAOC,OAAeC,YAAoBC,UAAkBC,UAAkBC,WAAW,GAAG;IACpF,UAAMC;MAAUC,MAAM;IAE1B,IAAI,CAAC,KAAKxB,SAAS;IAEbyB,WAAKA,IAAIA,KAAKP,KAAK;IACnBM,WAAKA,IAAIJ,UAAUF,KAAK;IACnBG,gBAAKG,IAAIH,UAAUF,UAAU;IAEnC,aAAQd,YAAY,KAAKlB;IAC9B,KAAKa,QAAQgB,cAAc;IAC3B,KAAKhB,QAAQM,SAAS,GAAG,GAAG,KAAKC,OAAO,KAAKM,OAAO;IAC/C,aAAQR,YAAY,KAAKnB;IACzB,aAAQuB,SAASS,MAAMQ,QAAQJ,QAAQ,IAAI,MAAM,KAAKrC,OAAO,OAAOwC,IAAIC,QAAQJ,QAAQ,IAAI,MAAMK,WAAWH,IAAIE,QAAQJ,QAAQ,CAAC,IAAI,KAAK,KAAKZ,QAAQ,KAAKC,MAAM;IAEnK,aAAQiB,UAAU,KAAK3B,QAAQ,KAAKW,UAAU,KAAKxB,IAAI,KAAKyB,SAAS,KAAKC,cAAc,KAAK1B,IAAI,KAAK2B,cAAc,KAAKH,SAAS,KAAKC,SAAS,KAAKC,cAAc,KAAK1B,IAAI,KAAK2B,YAAY;IAElM,KAAKf,QAAQM,SAAS,KAAKM,UAAU,KAAKE,cAAc,KAAK1B,IAAI,KAAKyB,SAAS,KAAKzB,IAAI,KAAK2B,YAAY;IAEpG,aAAQV,YAAY,KAAKlB;IAC9B,KAAKa,QAAQgB,cAAc;IAE3B,KAAKhB,QAAQM,SAAS,KAAKM,UAAU,KAAKE,cAAc,KAAK1B,IAAI,KAAKyB,SAAS,KAAKzB,KAAM,IAAK+B,aAAaE,YAAc,KAAKN,YAAY;EAC/I;AACJ;AAAC","names":["Panel","constructor","name","fg","bg","PR","Math","round","window","devicePixelRatio","document","createElement","width","height","style","position","cssText","context","canvas","getContext","font","textBaseline","fillStyle","fillRect","WIDTH","HEIGHT","fillText","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","globalAlpha","update","value","valueGraph","maxValue","maxGraph","decimals","Infinity","max","min","toFixed","parseFloat","drawImage"],"sources":["C:\\Users\\Wolfgang\\Documents\\GitHub\\Aeydran\\node_modules\\stats-gl\\lib\\panel.ts"],"sourcesContent":["class Panel {\n    canvas: HTMLCanvasElement;\n    context: CanvasRenderingContext2D | null;\n    name: string;\n    fg: string;\n    bg: string;\n    PR: number;\n    WIDTH: number;\n    HEIGHT: number;\n    TEXT_X: number;\n    TEXT_Y: number;\n    GRAPH_X: number;\n    GRAPH_Y: number;\n    GRAPH_WIDTH: number;\n    GRAPH_HEIGHT: number;\n\n    constructor(name: string, fg: string, bg: string) {\n\n        this.name = name;\n        this.fg = fg;\n        this.bg = bg;\n        this.PR = Math.round( window.devicePixelRatio || 1 );\n        \n        this.WIDTH = 90 * this.PR;\n        this.HEIGHT = 48 * this.PR;\n        this.TEXT_X = 3 * this.PR;\n        this.TEXT_Y = 2 * this.PR;\n        this.GRAPH_X = 3 * this.PR;\n        this.GRAPH_Y = 15 * this.PR;\n        this.GRAPH_WIDTH = 84 * this.PR;\n        this.GRAPH_HEIGHT = 30 * this.PR;\n\n        this.canvas = document.createElement('canvas');\n        this.canvas.width = 90 * this.PR;\n        this.canvas.height = 48 * this.PR;\n        this.canvas.style.width = '90px';\n        this.canvas.style.position = 'absolute';\n        this.canvas.style.height = '48px';\n        this.canvas.style.cssText = 'width:90px;height:48px';\n\n        this.context = this.canvas.getContext('2d');\n\n        if (this.context) {\n            this.context.font = 'bold ' + (9 * this.PR) + 'px Helvetica,Arial,sans-serif';\n            this.context.textBaseline = 'top';\n\n            this.context.fillStyle = this.bg;\n            this.context.fillRect(0, 0, this.WIDTH, this.HEIGHT);\n\n            this.context.fillStyle = this.fg;\n            this.context.fillText(this.name, this.TEXT_X, this.TEXT_Y);\n            this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n\n            this.context.fillStyle = this.bg;\n            this.context.globalAlpha = 0.9;\n            this.context.fillRect(this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH, this.GRAPH_HEIGHT);\n        }\n\n    }\n\n    update(value: number, valueGraph: number, maxValue: number, maxGraph: number, decimals = 0) {\n        let min = Infinity, max = 0;\n\n        if (!this.context) return;\n\n        min = Math.min(min, value);\n        max = Math.max(maxValue, value);\n        maxGraph = Math.max(maxGraph, valueGraph);\n\n        this.context.fillStyle = this.bg;\n        this.context.globalAlpha = 1;\n        this.context.fillRect(0, 0, this.WIDTH, this.GRAPH_Y);\n        this.context.fillStyle = this.fg;\n        this.context.fillText(value.toFixed(decimals) + ' ' + this.name + ' (' + min.toFixed(decimals) + '-' + parseFloat(max.toFixed(decimals)) + ')', this.TEXT_X, this.TEXT_Y);\n\n        this.context.drawImage(this.canvas, this.GRAPH_X + this.PR, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT, this.GRAPH_X, this.GRAPH_Y, this.GRAPH_WIDTH - this.PR, this.GRAPH_HEIGHT);\n\n        this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, this.GRAPH_HEIGHT);\n\n        this.context.fillStyle = this.bg;\n        this.context.globalAlpha = 0.9;\n\n        this.context.fillRect(this.GRAPH_X + this.GRAPH_WIDTH - this.PR, this.GRAPH_Y, this.PR, ((1 - (valueGraph / maxGraph))) * this.GRAPH_HEIGHT);\n    }\n};\n\nexport default Panel;"]},"metadata":{},"sourceType":"module","externalDependencies":[]}